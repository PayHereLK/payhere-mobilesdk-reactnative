// android/build.gradle

// based on:
//
// * https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle
//   original location:
//   - https://github.com/facebook/react-native/blob/0.58-stable/local-cli/templates/HelloWorld/android/build.gradle
//
// * https://github.com/facebook/react-native/blob/0.60-stable/template/android/app/build.gradle
//   original location:
//   - https://github.com/facebook/react-native/blob/0.58-stable/local-cli/templates/HelloWorld/android/app/build.gradle

def DEFAULT_COMPILE_SDK_VERSION = 28
def DEFAULT_BUILD_TOOLS_VERSION = '28.0.3'
def DEFAULT_MIN_SDK_VERSION = 16
def DEFAULT_TARGET_SDK_VERSION = 28

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    // ref: https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#sec:build_script_external_dependencies
    if (project == rootProject) {
        repositories {
            google()
            maven {
                // PayHere Android
                url 'https://jitpack.io'
            }
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.4.1'
        }
    }
}

apply plugin: 'com.android.library'
// apply plugin: 'maven'

android {
    compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)
    buildToolsVersion safeExtGet('buildToolsVersion', DEFAULT_BUILD_TOOLS_VERSION)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
        targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"
    }
    lintOptions {
        abortOnError false
    }
}

repositories {
    // ref: https://www.baeldung.com/maven-local-repository
    mavenLocal()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    maven {
        // PayHere Android (doesn't seem to work?)
        url 'https://jitpack.io'
    }
    google()
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'  // From node_modules
    implementation 'com.github.PayHereDevs:payhere-android-sdk:v3.0.18'
    implementation 'com.google.code.gson:gson:2.8.0'
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "lk.payhere"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'payheredevs'
                name 'PayHere'
            }
        }
    }
}

// afterEvaluate { project ->
//     // some Gradle build hooks ref:
//     // https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch03.html
//     task androidJavadoc(type: Javadoc) {
//         source = android.sourceSets.main.java.srcDirs
//         classpath += files(android.bootClasspath)
//         // classpath += files(project.getConfigurations().getByName('compile').asList())
//         include '**/*.java'
//     }

//     task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
//         classifier = 'javadoc'
//         from androidJavadoc.destinationDir
//     }

//     task androidSourcesJar(type: Jar) {
//         classifier = 'sources'
//         from android.sourceSets.main.java.srcDirs
//         include '**/*.java'
//     }

//     android.libraryVariants.all { variant ->
//         def name = variant.name.capitalize()
//         def javaCompileTask = variant.javaCompileProvider.get()

//         task "jar${name}"(type: Jar, dependsOn: javaCompileTask) {
//             from javaCompileTask.destinationDir
//         }
//     }

//     artifacts {
//         archives androidSourcesJar
//         archives androidJavadocJar
//     }
// }

afterEvaluate { project ->
    tasks.register('androidJavadoc', Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        include '**/*.java'
    }
    tasks.register('androidJavadocJar', Jar) {
        dependsOn 'androidJavadoc'
        archiveClassifier.set('javadoc') // Changed from classifier to archiveClassifier
        from tasks.named('androidJavadoc').get().destinationDir
    }
    tasks.register('androidSourcesJar', Jar) {
        archiveClassifier.set('sources') // Changed from classifier to archiveClassifier
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }
    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        def javaCompileTask = variant.javaCompileProvider
        tasks.register("jar${name}", Jar) {
            dependsOn javaCompileTask
            archiveClassifier.set(name.toLowerCase()) // Assuming you want to use the variant name as classifier
            from javaCompileTask.get().destinationDir
        }
    }
    artifacts {
        archives tasks.named('androidSourcesJar')
        archives tasks.named('androidJavadocJar')
    }
}